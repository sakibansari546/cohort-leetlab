// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Social {
  id       String  @id @default(uuid())
  website  String?
  twitter  String?
  github   String?
  linkedIn String?

  BasicInfo BasicInfo?
}

model BasicInfo {
  id       String    @id @default(uuid())
  gender   Gender?
  bio      String?
  birth    DateTime?
  socialId String?   @unique
  socials  Social?   @relation(fields: [socialId], references: [id], onDelete: Cascade)

  user User?
}

model User {
  id                      String    @id @default(uuid())
  fullname                String?
  email                   String    @unique
  username                String?   @unique
  password                String
  profileImage            String    @default("https://img.freepik.com/premium-vector/men-icon-trendy-avatar-character-cheerful-happy-people-flat-vector-illustration-round-frame-male-portraits-group-team-adorable-guys-isolated-white-background_275421-282.jpg?w=826")
  role                    UserRole  @default(USER)
  isEmailVerified         Boolean   @default(false)
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  refreshToken            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem        Problem[]
  Submission     Submission[]
  solvedProblems SolvedProblem[]
  playlist       Playlist[]

  basicInfoId String?    @unique
  basicInfo   BasicInfo? @relation(fields: [basicInfoId], references: [id], onDelete: Cascade)
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty @default(EASY)
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json // [{input : "1", output : "1"}, {input : "2", output : "2"}]
  codeSnippets       Json
  referenceSolutions Json // [{"JavaScript": 'Solution Code "}, {"Java": 'Solution Code"}]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions Submission[]

  solvedBy          SolvedProblem[]
  problemInPlaylist ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  source_code   Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted, Worng
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId String?
  problem   Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases Testcase[]
}

model Testcase {
  id            String  @id @default(uuid())
  testCase      Int
  passed        Boolean
  stdout        String?
  stderr        String?
  expected      String
  compileOutput String?
  status        String // Accepted, Worng
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission   Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String?

  @@index([submissionId])
}

model SolvedProblem {
  id        String  @id @default(uuid())
  userId    String?
  problemId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

// backend 
// high level system design // kafka redis websockets webrtc
